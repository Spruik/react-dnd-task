{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\25359\\\\sp\\\\react-dnd-task\\\\src\\\\components\\\\board.tsx\";\nimport * as React from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport styled from 'styled-components';\nimport InputTask from './InputTask'; // Import data for board\n\nimport { initialBoardData } from '../data/board-initial-data'; // Import BoardColumn component\n\nimport { BoardColumn } from './board-column'; // Create styles board element properties\n\nconst BoardEl = styled.div`\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between;\n`;\nconst AddTaskButton = styled.button`\n  border-radius: 8px;\n  margin-top: 10%;\n`;\nexport class Board extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: initialBoardData,\n      itemName: \"\"\n    };\n\n    this.onchange = event => {\n      this.setState({\n        itemName: event.target.value\n      });\n    };\n\n    this.showInputTask = () => {\n      let inputTask = document.getElementById(\"input-task\");\n      if (inputTask !== null) inputTask.style.display = \"block\";\n    };\n\n    this.onDragEnd = result => {\n      const {\n        source,\n        destination,\n        draggableId\n      } = result; // Do nothing if item is dropped outside the list\n\n      if (!destination) {\n        return;\n      } // Do nothing if the item is dropped into the same place\n\n\n      if (destination.droppableId === source.droppableId && destination.index === source.index) {\n        return;\n      } // Find column from which the item was dragged from\n\n\n      const columnStart = this.state.data.columns[source.droppableId]; // Find column in which the item was dropped\n\n      const columnFinish = this.state.data.columns[destination.droppableId]; // Moving items in the same list\n\n      if (columnStart === columnFinish) {\n        // Get all item ids in currently active list\n        const newItemsIds = Array.from(columnStart.itemsIds); // Remove the id of dragged item from its original position\n\n        newItemsIds.splice(source.index, 1); // Insert the id of dragged item to the new position\n\n        newItemsIds.splice(destination.index, 0, draggableId); // Create new, updated, object with data for columns\n\n        const newColumnStart = { ...columnStart,\n          itemsIds: newItemsIds\n        }; // Create new board state with updated data for columns\n\n        const newState = { ...this.state.data,\n          columns: { ...this.state.data.columns,\n            [newColumnStart.id]: newColumnStart\n          }\n        }; // Update the board state with new data\n\n        this.setState({\n          data: newState\n        });\n      } else {\n        // Moving items from one list to another\n        // Get all item ids in source list\n        const newStartItemsIds = Array.from(columnStart.itemsIds); // Remove the id of dragged item from its original position\n\n        newStartItemsIds.splice(source.index, 1); // Create new, updated, object with data for source column\n\n        const newColumnStart = { ...columnStart,\n          itemsIds: newStartItemsIds\n        }; // Get all item ids in destination list\n\n        const newFinishItemsIds = Array.from(columnFinish.itemsIds); // Insert the id of dragged item to the new position in destination list\n\n        newFinishItemsIds.splice(destination.index, 0, draggableId); // Create new, updated, object with data for destination column\n\n        const newColumnFinish = { ...columnFinish,\n          itemsIds: newFinishItemsIds\n        }; // Create new board state with updated data for both, source and destination columns\n\n        const newState = { ...this.state.data,\n          columns: { ...this.state.data.columns,\n            [newColumnStart.id]: newColumnStart,\n            [newColumnFinish.id]: newColumnFinish\n          }\n        }; // Update the board state with new data\n\n        this.setState({\n          data: newState\n        });\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(BoardEl, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(DragDropContext, {\n      onDragEnd: this.onDragEnd,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }\n    }, this.state.data.columnsOrder.map(columnId => {\n      // Get id of the current column\n      const column = this.state.data.columns[columnId]; // Get item belonging to the current column\n\n      const items = column.itemsIds.map(itemId => this.state.data.items[itemId]); // Render the BoardColumn component\n\n      return /*#__PURE__*/React.createElement(BoardColumn, {\n        key: column.id,\n        column: column,\n        items: items,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 20\n        }\n      });\n    }))), /*#__PURE__*/React.createElement(AddTaskButton, {\n      onClick: this.showInputTask,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 7\n      }\n    }, \" New Task \"), /*#__PURE__*/React.createElement(InputTask, {\n      itemName: \"vicky wang\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 7\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/25359/sp/react-dnd-task/src/components/board.tsx"],"names":["React","DragDropContext","styled","InputTask","initialBoardData","BoardColumn","BoardEl","div","AddTaskButton","button","Board","Component","state","data","itemName","onchange","event","setState","target","value","showInputTask","inputTask","document","getElementById","style","display","onDragEnd","result","source","destination","draggableId","droppableId","index","columnStart","columns","columnFinish","newItemsIds","Array","from","itemsIds","splice","newColumnStart","newState","id","newStartItemsIds","newFinishItemsIds","newColumnFinish","render","textAlign","columnsOrder","map","columnId","column","items","itemId"],"mappings":"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","sourcesContent":["import * as React from 'react'\r\nimport { DragDropContext } from 'react-beautiful-dnd'\r\nimport styled from 'styled-components'\r\nimport InputTask from './InputTask';\r\n\r\n// Import data for board\r\nimport { initialBoardData } from '../data/board-initial-data'\r\n\r\n// Import BoardColumn component\r\nimport { BoardColumn } from './board-column'\r\n\r\n\r\n// Create styles board element properties\r\nconst BoardEl = styled.div`\r\n  display: flex;\r\n  align-items: flex-start;\r\n  justify-content: space-between;\r\n`\r\nconst AddTaskButton = styled.button`\r\n  border-radius: 8px;\r\n  margin-top: 10%;\r\n`\r\n\r\nexport class Board extends React.Component {\r\n  \r\n  // Initialize board state with board data\r\n  state = {data:initialBoardData, itemName:\"\"};\r\n\r\n  onchange = (event) => {\r\n    this.setState({itemName: event.target.value})\r\n  }\r\n\r\n  showInputTask = () => {\r\n    let inputTask = document.getElementById(\"input-task\");\r\n    if (inputTask !== null) inputTask.style.display = \"block\";\r\n  }\r\n  \r\n  // Handle drag & drop\r\n  onDragEnd = (result: any) => {\r\n    const { source, destination, draggableId } = result\r\n\r\n    // Do nothing if item is dropped outside the list\r\n    if (!destination) {\r\n      return\r\n    }\r\n\r\n    // Do nothing if the item is dropped into the same place\r\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\r\n      return\r\n    }\r\n\r\n    // Find column from which the item was dragged from\r\n    const columnStart = (this.state.data.columns as any)[source.droppableId]\r\n\r\n    // Find column in which the item was dropped\r\n    const columnFinish = (this.state.data.columns as any)[destination.droppableId]\r\n\r\n    // Moving items in the same list\r\n    if (columnStart === columnFinish) {\r\n      // Get all item ids in currently active list\r\n      const newItemsIds = Array.from(columnStart.itemsIds)\r\n\r\n      // Remove the id of dragged item from its original position\r\n      newItemsIds.splice(source.index, 1)\r\n\r\n      // Insert the id of dragged item to the new position\r\n      newItemsIds.splice(destination.index, 0, draggableId)\r\n\r\n      // Create new, updated, object with data for columns\r\n      const newColumnStart = {\r\n        ...columnStart,\r\n        itemsIds: newItemsIds\r\n      }\r\n\r\n      // Create new board state with updated data for columns\r\n      const newState = {\r\n        ...this.state.data,\r\n        columns: {\r\n          ...this.state.data.columns,\r\n          [newColumnStart.id]: newColumnStart\r\n        }\r\n      }\r\n\r\n      // Update the board state with new data\r\n      this.setState({data:newState})\r\n    } else {\r\n      // Moving items from one list to another\r\n      // Get all item ids in source list\r\n      const newStartItemsIds = Array.from(columnStart.itemsIds)\r\n\r\n      // Remove the id of dragged item from its original position\r\n      newStartItemsIds.splice(source.index, 1)\r\n\r\n      // Create new, updated, object with data for source column\r\n      const newColumnStart = {\r\n        ...columnStart,\r\n        itemsIds: newStartItemsIds\r\n      }\r\n\r\n      // Get all item ids in destination list\r\n      const newFinishItemsIds = Array.from(columnFinish.itemsIds)\r\n\r\n      // Insert the id of dragged item to the new position in destination list\r\n      newFinishItemsIds.splice(destination.index, 0, draggableId)\r\n\r\n      // Create new, updated, object with data for destination column\r\n      const newColumnFinish = {\r\n        ...columnFinish,\r\n        itemsIds: newFinishItemsIds\r\n      }\r\n\r\n      // Create new board state with updated data for both, source and destination columns\r\n      const newState = {\r\n        ...this.state.data,\r\n        columns: {\r\n          ...this.state.data.columns,\r\n          [newColumnStart.id]: newColumnStart,\r\n          [newColumnFinish.id]: newColumnFinish\r\n        }\r\n      }\r\n\r\n      // Update the board state with new data\r\n      this.setState({data:newState})\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div style={{textAlign:\"center\"}}> \r\n      <BoardEl>\r\n        <DragDropContext onDragEnd={this.onDragEnd}>\r\n          {this.state.data.columnsOrder.map(columnId => {\r\n            // Get id of the current column\r\n            const column = (this.state.data.columns as any)[columnId]\r\n\r\n            // Get item belonging to the current column\r\n            const items = column.itemsIds.map((itemId: string) => (this.state.data.items as any)[itemId])\r\n\r\n            // Render the BoardColumn component\r\n            return <BoardColumn key={column.id} column={column} items={items} />\r\n          })}\r\n        </DragDropContext>\r\n      </BoardEl>\r\n      <AddTaskButton onClick={this.showInputTask}> New Task </AddTaskButton>\r\n      <InputTask itemName=\"vicky wang\"/>\r\n      </div>\r\n    )\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}