{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\25359\\\\sp\\\\react-dnd-task\\\\src\\\\components\\\\board.tsx\";\nimport * as React from \"react\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nimport styled from \"styled-components\"; // Import data for board\n\nimport { initialBoardData } from \"../data/board-initial-data\"; // Import BoardColumn component\n\nimport { BoardColumn } from \"./board-column\";\nconst bgColor = [\"#FB7D44\", \"#2A92BF\", \"#F4CE46\", \"#00B961\"]; // Create styles board element properties\n\nconst BoardEl = styled.div`\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between;\n`;\nexport class Board extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: initialBoardData,\n      ColumnDroppable: false,\n      itemDroppable: false\n    };\n\n    this.editContent = event => {\n      if (event.key === \"Enter\") {\n        // get edited item\n        let target = event.target;\n        let itemId = target.id;\n        let itemContent = target.value; // updated content of item\n\n        const newState = { ...this.state.data,\n          items: { ...this.state.data.items,\n            [itemId]: {\n              id: itemId,\n              content: itemContent\n            }\n          }\n        };\n        this.setState({\n          data: newState\n        }); // press enter, lose focus\n\n        event.target.blur();\n      }\n    };\n\n    this.addNewTask = event => {\n      if (event.key === \"Enter\") {\n        var _document$getElementB;\n\n        // Do nothing if no typing in textField\n        let itemContent = event.target.value;\n        console.log(event.target.value);\n        if (itemContent === \"\") return;\n        const columnId = (_document$getElementB = document.getElementById(\"add-content\")) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.innerHTML; // auto generate item_id\n\n        let itemIndex = Object.keys(this.state.data.items).length + 1;\n        let itemId = \"item-\" + itemIndex; // put the new added item into column-4 by default\n\n        const columnAdd = this.state.data.columns[columnId];\n        const newItemsIds = Array.from(columnAdd.itemsIds);\n        newItemsIds.push(itemId);\n        const newColumnAdd = { ...columnAdd,\n          itemsIds: newItemsIds\n        }; // update items\n\n        const newState = { ...this.state.data,\n          items: { ...this.state.data.items,\n            [itemId]: {\n              id: itemId,\n              content: itemContent\n            }\n          },\n          columns: { ...this.state.data.columns,\n            columnId: newColumnAdd\n          }\n        };\n        this.setState({\n          data: newState\n        });\n        console.log(this.state.data);\n      }\n    };\n\n    this.onDragStart = result => {\n      const {\n        draggableId\n      } = result;\n      console.log(draggableId);\n\n      if (draggableId.includes(\"item\")) {\n        this.setState({\n          ColumnDroppable: true\n        });\n        this.setState({\n          itemDroppable: false\n        });\n      }\n\n      if (draggableId.includes(\"column\")) {\n        this.setState({\n          itemDroppable: true\n        });\n        this.setState({\n          ColumnDroppable: false\n        });\n      }\n    };\n\n    this.onDragEnd = result => {\n      const {\n        source,\n        destination,\n        draggableId\n      } = result; // Do nothing if item is dropped outside the list\n\n      if (!destination) return;\n      if (source.droppableId === \"lalala\" && destination.droppableId !== \"lalala\") return;\n      if (source.droppableId !== \"lalala\" && destination.droppableId === \"lalala\") return;\n\n      if (draggableId.includes(\"column\")) {\n        const newcolumnsOrder = this.state.data.columnsOrder;\n        let temp = newcolumnsOrder[source.index];\n        newcolumnsOrder[source.index] = newcolumnsOrder[destination.index];\n        newcolumnsOrder[destination.index] = temp;\n        let tmp = bgColor[source.index];\n        bgColor[source.index] = bgColor[destination.index];\n        bgColor[destination.index] = tmp;\n        const newState = { ...this.state.data,\n          columnsOrder: newcolumnsOrder\n        };\n        this.setState({\n          data: newState\n        });\n      }\n\n      if (draggableId.includes(\"item\")) {\n        // Do nothing if the item is dropped into the same place\n        if (destination.droppableId === source.droppableId && destination.index === source.index) {\n          return;\n        } // Find column from which the item was dragged from\n\n\n        const columnStart = this.state.data.columns[source.droppableId]; // Find column in which the item was dropped\n\n        const columnFinish = this.state.data.columns[destination.droppableId]; // Moving items in the same list\n\n        if (columnStart === columnFinish) {\n          // Get all item ids in currently active list\n          const newItemsIds = Array.from(columnStart.itemsIds); // Remove the id of dragged item from its original position\n\n          newItemsIds.splice(source.index, 1); // Insert the id of dragged item to the new position\n\n          newItemsIds.splice(destination.index, 0, draggableId); // Create new, updated, object with data for columns\n\n          const newColumnStart = { ...columnStart,\n            itemsIds: newItemsIds\n          }; // Create new board state with updated data for columns\n\n          const newState = { ...this.state.data,\n            columns: { ...this.state.data.columns,\n              [newColumnStart.id]: newColumnStart\n            }\n          }; // Update the board state with new data\n\n          this.setState({\n            data: newState\n          });\n        } else {\n          // Moving items from one list to another\n          // Get all item ids in source list\n          const newStartItemsIds = Array.from(columnStart.itemsIds); // Remove the id of dragged item from its original position\n\n          newStartItemsIds.splice(source.index, 1); // Create new, updated, object with data for source column\n\n          const newColumnStart = { ...columnStart,\n            itemsIds: newStartItemsIds\n          }; // Get all item ids in destination list\n\n          const newFinishItemsIds = Array.from(columnFinish.itemsIds); // Insert the id of dragged item to the new position in destination list\n\n          newFinishItemsIds.splice(destination.index, 0, draggableId); // Create new, updated, object with data for destination column\n\n          const newColumnFinish = { ...columnFinish,\n            itemsIds: newFinishItemsIds\n          }; // Create new board state with updated data for both, source and destination columns\n\n          const newState = { ...this.state.data,\n            columns: { ...this.state.data.columns,\n              [newColumnStart.id]: newColumnStart,\n              [newColumnFinish.id]: newColumnFinish\n            }\n          }; // Update the board state with new data\n\n          this.setState({\n            data: newState\n          });\n        }\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        textAlign: \"center\",\n        color: \"#fff\",\n        marginTop: \"5%\",\n        marginBottom: \"5%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }\n    }, \" Welcome to Vicky's Coding Test \"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }\n    }, \" Completed at 19/09/2021 \")), /*#__PURE__*/React.createElement(DragDropContext, {\n      onDragEnd: this.onDragEnd,\n      onDragStart: this.onDragStart,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Droppable, {\n      droppableId: \"lalala\",\n      direction: \"horizontal\",\n      isDropDisabled: this.state.ColumnDroppable,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 13\n      }\n    }, provided => /*#__PURE__*/React.createElement(BoardEl, Object.assign({}, provided.droppableProps, {\n      ref: provided.innerRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 17\n      }\n    }), this.state.data.columnsOrder.map((columnId, index) => {\n      // Get id of the current column\n      const column = this.state.data.columns[columnId]; // Get item belonging to the current column\n\n      const items = column.itemsIds.map(itemId => this.state.data.items[itemId]); // Render the BoardColumn component\n\n      return /*#__PURE__*/React.createElement(BoardColumn, {\n        bgColor: bgColor[index],\n        index: index,\n        key: column.id,\n        column: column,\n        items: items,\n        onkey: this.editContent,\n        AddonKey: this.addNewTask,\n        droppable: this.state.itemDroppable,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 23\n        }\n      });\n    }), provided.placeholder))));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/25359/sp/react-dnd-task/src/components/board.tsx"],"names":["React","DragDropContext","Droppable","styled","initialBoardData","BoardColumn","bgColor","BoardEl","div","Board","Component","state","data","ColumnDroppable","itemDroppable","editContent","event","key","target","itemId","id","itemContent","value","newState","items","content","setState","blur","addNewTask","console","log","columnId","document","getElementById","innerHTML","itemIndex","Object","keys","length","columnAdd","columns","newItemsIds","Array","from","itemsIds","push","newColumnAdd","onDragStart","result","draggableId","includes","onDragEnd","source","destination","droppableId","newcolumnsOrder","columnsOrder","temp","index","tmp","columnStart","columnFinish","splice","newColumnStart","newStartItemsIds","newFinishItemsIds","newColumnFinish","render","textAlign","color","marginTop","marginBottom","provided","droppableProps","innerRef","map","column","placeholder"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\r\nimport styled from \"styled-components\";\r\n\r\n\r\n// Import data for board\r\nimport { initialBoardData } from \"../data/board-initial-data\";\r\n\r\n// Import BoardColumn component\r\nimport { BoardColumn } from \"./board-column\";\r\n\r\nconst bgColor = [\"#FB7D44\", \"#2A92BF\", \"#F4CE46\", \"#00B961\"]\r\n\r\n// Create styles board element properties\r\nconst BoardEl = styled.div`\r\n  display: flex;\r\n  align-items: flex-start;\r\n  justify-content: space-between;\r\n`;\r\nexport class Board extends React.Component {\r\n  // Initialize board state with board data\r\n  state = { data: initialBoardData, ColumnDroppable: false, itemDroppable:false };\r\n\r\n  // Handle edit content of items\r\n  editContent = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (event.key === \"Enter\") {\r\n      // get edited item\r\n      let target = event.target as HTMLInputElement;\r\n      let itemId = target.id;\r\n      let itemContent = target.value;\r\n      // updated content of item\r\n      const newState = {\r\n        ...this.state.data,\r\n        items: {\r\n          ...this.state.data.items,\r\n          [itemId]: { id: itemId, content: itemContent },\r\n        },\r\n      };\r\n      this.setState({ data: newState });\r\n      // press enter, lose focus\r\n      (event.target as HTMLInputElement).blur();\r\n    }\r\n  };\r\n\r\n  // Handle adding new Tasks\r\n  addNewTask = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (event.key === \"Enter\"){\r\n      // Do nothing if no typing in textField\r\n    let itemContent = (event.target as HTMLInputElement).value;\r\n    console.log((event.target as HTMLInputElement).value);\r\n    if (itemContent === \"\") return;\r\n    const columnId = document.getElementById(\"add-content\")?.innerHTML;\r\n    \r\n    // auto generate item_id\r\n    let itemIndex = Object.keys(this.state.data.items).length + 1;\r\n    let itemId: string = \"item-\" + itemIndex;\r\n\r\n    // put the new added item into column-4 by default\r\n    const columnAdd = (this.state.data.columns as any)[columnId];\r\n    const newItemsIds = Array.from(columnAdd.itemsIds);\r\n    newItemsIds.push(itemId);\r\n    const newColumnAdd = {\r\n      ...columnAdd,\r\n      itemsIds: newItemsIds,\r\n    };\r\n\r\n    // update items\r\n    const newState = {\r\n      ...this.state.data,\r\n      items: {\r\n        ...this.state.data.items,\r\n        [itemId]: { id: itemId, content: itemContent },\r\n      },\r\n      columns: {\r\n        ...this.state.data.columns,\r\n        columnId: newColumnAdd,\r\n      },\r\n    };\r\n    this.setState({ data: newState });\r\n    console.log(this.state.data);\r\n    }\r\n    \r\n  };\r\n\r\n  onDragStart = (result:any) => {\r\n    \r\n    const {draggableId} = result;\r\n    console.log(draggableId);\r\n    if (draggableId.includes(\"item\")){\r\n      this.setState({ColumnDroppable:true});\r\n      this.setState({itemDroppable:false});\r\n    }\r\n    if (draggableId.includes(\"column\")){\r\n      this.setState({itemDroppable:true});\r\n      this.setState({ColumnDroppable:false});\r\n    }\r\n  }\r\n  // Handle drag & drop\r\n  onDragEnd = (result: any) => {\r\n    const { source, destination, draggableId } = result;\r\n     // Do nothing if item is dropped outside the list\r\n    if (!destination) return;\r\n    if (source.droppableId === \"lalala\" && destination.droppableId !== \"lalala\") return;\r\n    if (source.droppableId !== \"lalala\" && destination.droppableId === \"lalala\") return;\r\n    if (draggableId.includes(\"column\")){\r\n      const newcolumnsOrder = this.state.data.columnsOrder;\r\n      let temp = newcolumnsOrder[source.index];\r\n      newcolumnsOrder[source.index] = newcolumnsOrder[destination.index];\r\n      newcolumnsOrder[destination.index] = temp;\r\n      let tmp = bgColor[source.index];\r\n      bgColor[source.index] = bgColor[destination.index];\r\n      bgColor[destination.index] = tmp;\r\n      const newState = {\r\n        ...this.state.data,\r\n        columnsOrder:newcolumnsOrder\r\n      };\r\n      this.setState({ data: newState });\r\n    }\r\n    if (draggableId.includes(\"item\")){\r\n    // Do nothing if the item is dropped into the same place\r\n    if (\r\n      destination.droppableId === source.droppableId &&\r\n      destination.index === source.index\r\n    ) {\r\n      return;\r\n    }\r\n    \r\n    // Find column from which the item was dragged from\r\n    const columnStart = (this.state.data.columns as any)[source.droppableId];\r\n\r\n    // Find column in which the item was dropped\r\n    const columnFinish = (this.state.data.columns as any)[\r\n      destination.droppableId\r\n    ];\r\n\r\n    // Moving items in the same list\r\n    if (columnStart === columnFinish) {\r\n      // Get all item ids in currently active list\r\n      const newItemsIds = Array.from(columnStart.itemsIds);\r\n\r\n      // Remove the id of dragged item from its original position\r\n      newItemsIds.splice(source.index, 1);\r\n\r\n      // Insert the id of dragged item to the new position\r\n      newItemsIds.splice(destination.index, 0, draggableId);\r\n\r\n      // Create new, updated, object with data for columns\r\n      const newColumnStart = {\r\n        ...columnStart,\r\n        itemsIds: newItemsIds,\r\n      };\r\n\r\n      // Create new board state with updated data for columns\r\n      const newState = {\r\n        ...this.state.data,\r\n        columns: {\r\n          ...this.state.data.columns,\r\n          [newColumnStart.id]: newColumnStart,\r\n        },\r\n      };\r\n\r\n      // Update the board state with new data\r\n      this.setState({ data: newState });\r\n    } else {\r\n      // Moving items from one list to another\r\n      // Get all item ids in source list\r\n      const newStartItemsIds = Array.from(columnStart.itemsIds);\r\n\r\n      // Remove the id of dragged item from its original position\r\n      newStartItemsIds.splice(source.index, 1);\r\n\r\n      // Create new, updated, object with data for source column\r\n      const newColumnStart = {\r\n        ...columnStart,\r\n        itemsIds: newStartItemsIds,\r\n      };\r\n\r\n      // Get all item ids in destination list\r\n      const newFinishItemsIds = Array.from(columnFinish.itemsIds);\r\n\r\n      // Insert the id of dragged item to the new position in destination list\r\n      newFinishItemsIds.splice(destination.index, 0, draggableId);\r\n\r\n      // Create new, updated, object with data for destination column\r\n      const newColumnFinish = {\r\n        ...columnFinish,\r\n        itemsIds: newFinishItemsIds,\r\n      };\r\n\r\n      // Create new board state with updated data for both, source and destination columns\r\n      const newState = {\r\n        ...this.state.data,\r\n        columns: {\r\n          ...this.state.data.columns,\r\n          [newColumnStart.id]: newColumnStart,\r\n          [newColumnFinish.id]: newColumnFinish,\r\n        },\r\n      };\r\n\r\n      // Update the board state with new data\r\n      this.setState({ data: newState });\r\n    }\r\n  }\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div style={{textAlign:\"center\", color:\"#fff\", marginTop:\"5%\", marginBottom:\"5%\"}}>\r\n        <h1> Welcome to Vicky's Coding Test </h1>\r\n        <h3> Completed at 19/09/2021 </h3>\r\n        </div>\r\n        <DragDropContext onDragEnd={this.onDragEnd} onDragStart={this.onDragStart}>\r\n            <Droppable droppableId=\"lalala\" direction=\"horizontal\" isDropDisabled={this.state.ColumnDroppable}>\r\n              {(provided) => (\r\n                <BoardEl {...provided.droppableProps} ref={provided.innerRef}>\r\n                  {this.state.data.columnsOrder.map((columnId, index) => {\r\n                    // Get id of the current column\r\n                    const column = (this.state.data.columns as any)[columnId];\r\n\r\n                    // Get item belonging to the current column\r\n                    const items = column.itemsIds.map(\r\n                      (itemId: string) => (this.state.data.items as any)[itemId]\r\n                    );\r\n\r\n                    // Render the BoardColumn component\r\n                    return (\r\n                      <BoardColumn\r\n                        bgColor = {bgColor[index]}\r\n                        index={index}\r\n                        key={column.id}\r\n                        column={column}\r\n                        items={items}\r\n                        onkey={this.editContent}\r\n                        AddonKey={this.addNewTask}\r\n                        droppable = {this.state.itemDroppable}\r\n                      />\r\n                    );\r\n                  })}\r\n                  {provided.placeholder}\r\n                </BoardEl>\r\n              )}\r\n            </Droppable>\r\n            </DragDropContext>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}