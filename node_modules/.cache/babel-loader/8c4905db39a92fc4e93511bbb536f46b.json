{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\25359\\\\sp\\\\react-dnd-task\\\\src\\\\components\\\\board.tsx\";\nimport * as React from \"react\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport styled from \"styled-components\";\nimport InputTask from \"./InputTask\"; // Import data for board\n\nimport { initialBoardData } from \"../data/board-initial-data\"; // Import BoardColumn component\n\nimport { BoardColumn } from \"./board-column\";\n// Create styles board element properties\nconst BoardEl = styled.div`\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between;\n`;\nconst AddTaskButton = styled.button`\n  border-radius: 8px;\n  margin-top: 10%;\n`;\nexport class Board extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: initialBoardData,\n      itemContent: \"\"\n    };\n\n    this.showInputTask = () => {\n      let inputTask = document.getElementById(\"input-task\");\n      if (inputTask !== null) inputTask.style.display = \"block\";\n    };\n\n    this.addNewTask = () => {\n      let item_index = Object.keys(this.state.data.items).length + 1;\n      let item_id = \"item-\" + item_index;\n      console.log(item_id);\n      console.log(this.state.itemContent);\n      const newState = { ...this.state.data,\n        items: { ...this.state.data.items,\n          [item_id]: {\n            id: item_id,\n            content: this.state.itemContent\n          }\n        }\n      };\n      this.setState({\n        data: newState\n      });\n    };\n\n    this.onDragEnd = result => {\n      const {\n        source,\n        destination,\n        draggableId\n      } = result; // Do nothing if item is dropped outside the list\n\n      if (!destination) {\n        return;\n      } // Do nothing if the item is dropped into the same place\n\n\n      if (destination.droppableId === source.droppableId && destination.index === source.index) {\n        return;\n      } // Find column from which the item was dragged from\n\n\n      const columnStart = this.state.data.columns[source.droppableId]; // Find column in which the item was dropped\n\n      const columnFinish = this.state.data.columns[destination.droppableId]; // Moving items in the same list\n\n      if (columnStart === columnFinish) {\n        // Get all item ids in currently active list\n        const newItemsIds = Array.from(columnStart.itemsIds); // Remove the id of dragged item from its original position\n\n        newItemsIds.splice(source.index, 1); // Insert the id of dragged item to the new position\n\n        newItemsIds.splice(destination.index, 0, draggableId); // Create new, updated, object with data for columns\n\n        const newColumnStart = { ...columnStart,\n          itemsIds: newItemsIds\n        }; // Create new board state with updated data for columns\n\n        const newState = { ...this.state.data,\n          columns: { ...this.state.data.columns,\n            [newColumnStart.id]: newColumnStart\n          }\n        }; // Update the board state with new data\n\n        this.setState({\n          data: newState\n        });\n      } else {\n        // Moving items from one list to another\n        // Get all item ids in source list\n        const newStartItemsIds = Array.from(columnStart.itemsIds); // Remove the id of dragged item from its original position\n\n        newStartItemsIds.splice(source.index, 1); // Create new, updated, object with data for source column\n\n        const newColumnStart = { ...columnStart,\n          itemsIds: newStartItemsIds\n        }; // Get all item ids in destination list\n\n        const newFinishItemsIds = Array.from(columnFinish.itemsIds); // Insert the id of dragged item to the new position in destination list\n\n        newFinishItemsIds.splice(destination.index, 0, draggableId); // Create new, updated, object with data for destination column\n\n        const newColumnFinish = { ...columnFinish,\n          itemsIds: newFinishItemsIds\n        }; // Create new board state with updated data for both, source and destination columns\n\n        const newState = { ...this.state.data,\n          columns: { ...this.state.data.columns,\n            [newColumnStart.id]: newColumnStart,\n            [newColumnFinish.id]: newColumnFinish\n          }\n        }; // Update the board state with new data\n\n        this.setState({\n          data: newState\n        });\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(BoardEl, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(DragDropContext, {\n      onDragEnd: this.onDragEnd,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }\n    }, this.state.data.columnsOrder.map(columnId => {\n      // Get id of the current column\n      const column = this.state.data.columns[columnId]; // Get item belonging to the current column\n\n      const items = column.itemsIds.map(itemId => this.state.data.items[itemId]); // Render the BoardColumn component\n\n      return /*#__PURE__*/React.createElement(BoardColumn, {\n        key: column.id,\n        column: column,\n        items: items,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 17\n        }\n      });\n    }))), /*#__PURE__*/React.createElement(AddTaskButton, {\n      onClick: this.showInputTask,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }\n    }, \" New Task \"), /*#__PURE__*/React.createElement(InputTask, {\n      submitClick: this.addNewTask,\n      itemName: this.state.itemContent,\n      onchange: event => {\n        this.setState({\n          itemContent: event.target.value\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/25359/sp/react-dnd-task/src/components/board.tsx"],"names":["React","DragDropContext","styled","InputTask","initialBoardData","BoardColumn","BoardEl","div","AddTaskButton","button","Board","Component","state","data","itemContent","showInputTask","inputTask","document","getElementById","style","display","addNewTask","item_index","Object","keys","items","length","item_id","console","log","newState","id","content","setState","onDragEnd","result","source","destination","draggableId","droppableId","index","columnStart","columns","columnFinish","newItemsIds","Array","from","itemsIds","splice","newColumnStart","newStartItemsIds","newFinishItemsIds","newColumnFinish","render","textAlign","columnsOrder","map","columnId","column","itemId","event","target","value"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport styled from \"styled-components\";\r\nimport InputTask from \"./InputTask\";\r\n\r\n// Import data for board\r\nimport { initialBoardData } from \"../data/board-initial-data\";\r\n\r\n// Import BoardColumn component\r\nimport { BoardColumn } from \"./board-column\";\r\nimport { ContactSupportOutlined } from \"@mui/icons-material\";\r\n\r\n// Create styles board element properties\r\nconst BoardEl = styled.div`\r\n  display: flex;\r\n  align-items: flex-start;\r\n  justify-content: space-between;\r\n`;\r\nconst AddTaskButton = styled.button`\r\n  border-radius: 8px;\r\n  margin-top: 10%;\r\n`;\r\n\r\nexport class Board extends React.Component {\r\n  // Initialize board state with board data\r\n  state = { data: initialBoardData, itemContent: \"\" };\r\n\r\n  showInputTask = () => {\r\n    let inputTask = document.getElementById(\"input-task\");\r\n    if (inputTask !== null) inputTask.style.display = \"block\";\r\n  };\r\n \r\n  addNewTask = () => {\r\n    let item_index = Object.keys(this.state.data.items).length + 1;\r\n    let item_id:string = \"item-\" + item_index;\r\n    console.log(item_id);\r\n    console.log(this.state.itemContent);\r\n    const newState = {\r\n      ...this.state.data,\r\n      items: {\r\n        ...this.state.data.items,\r\n        [item_id]: {id:item_id, content:this.state.itemContent}\r\n      }\r\n    };\r\n    this.setState({data:newState});\r\n  }\r\n\r\n  // Handle drag & drop\r\n  onDragEnd = (result: any) => {\r\n    const { source, destination, draggableId } = result;\r\n\r\n    // Do nothing if item is dropped outside the list\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    // Do nothing if the item is dropped into the same place\r\n    if (\r\n      destination.droppableId === source.droppableId &&\r\n      destination.index === source.index\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    // Find column from which the item was dragged from\r\n    const columnStart = (this.state.data.columns as any)[source.droppableId];\r\n\r\n    // Find column in which the item was dropped\r\n    const columnFinish = (this.state.data.columns as any)[\r\n      destination.droppableId\r\n    ];\r\n\r\n    // Moving items in the same list\r\n    if (columnStart === columnFinish) {\r\n      // Get all item ids in currently active list\r\n      const newItemsIds = Array.from(columnStart.itemsIds);\r\n\r\n      // Remove the id of dragged item from its original position\r\n      newItemsIds.splice(source.index, 1);\r\n\r\n      // Insert the id of dragged item to the new position\r\n      newItemsIds.splice(destination.index, 0, draggableId);\r\n\r\n      // Create new, updated, object with data for columns\r\n      const newColumnStart = {\r\n        ...columnStart,\r\n        itemsIds: newItemsIds,\r\n      };\r\n\r\n      // Create new board state with updated data for columns\r\n      const newState = {\r\n        ...this.state.data,\r\n        columns: {\r\n          ...this.state.data.columns,\r\n          [newColumnStart.id]: newColumnStart,\r\n        },\r\n      };\r\n\r\n      // Update the board state with new data\r\n      this.setState({ data: newState });\r\n    } else {\r\n      // Moving items from one list to another\r\n      // Get all item ids in source list\r\n      const newStartItemsIds = Array.from(columnStart.itemsIds);\r\n\r\n      // Remove the id of dragged item from its original position\r\n      newStartItemsIds.splice(source.index, 1);\r\n\r\n      // Create new, updated, object with data for source column\r\n      const newColumnStart = {\r\n        ...columnStart,\r\n        itemsIds: newStartItemsIds,\r\n      };\r\n\r\n      // Get all item ids in destination list\r\n      const newFinishItemsIds = Array.from(columnFinish.itemsIds);\r\n\r\n      // Insert the id of dragged item to the new position in destination list\r\n      newFinishItemsIds.splice(destination.index, 0, draggableId);\r\n\r\n      // Create new, updated, object with data for destination column\r\n      const newColumnFinish = {\r\n        ...columnFinish,\r\n        itemsIds: newFinishItemsIds,\r\n      };\r\n\r\n      // Create new board state with updated data for both, source and destination columns\r\n      const newState = {\r\n        ...this.state.data,\r\n        columns: {\r\n          ...this.state.data.columns,\r\n          [newColumnStart.id]: newColumnStart,\r\n          [newColumnFinish.id]: newColumnFinish,\r\n        },\r\n      };\r\n\r\n      // Update the board state with new data\r\n      this.setState({ data: newState });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ textAlign: \"center\" }}>\r\n        <BoardEl>\r\n          <DragDropContext onDragEnd={this.onDragEnd}>\r\n            {this.state.data.columnsOrder.map((columnId) => {\r\n              // Get id of the current column\r\n              const column = (this.state.data.columns as any)[columnId];\r\n\r\n              // Get item belonging to the current column\r\n              const items = column.itemsIds.map(\r\n                (itemId: string) => (this.state.data.items as any)[itemId]\r\n              );\r\n\r\n              // Render the BoardColumn component\r\n              return (\r\n                <BoardColumn key={column.id} column={column} items={items} />\r\n              );\r\n            })}\r\n          </DragDropContext>\r\n        </BoardEl>\r\n        <AddTaskButton onClick={this.showInputTask}> New Task </AddTaskButton>\r\n        <InputTask\r\n          submitClick = {this.addNewTask}\r\n          itemName={this.state.itemContent}\r\n          onchange={(event) => {\r\n            this.setState({ itemContent: event.target.value });\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}