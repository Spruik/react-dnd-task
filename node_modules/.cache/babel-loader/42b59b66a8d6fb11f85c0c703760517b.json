{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\25359\\\\sp\\\\react-dnd-task\\\\src\\\\components\\\\board.tsx\";\nimport * as React from \"react\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport styled from \"styled-components\";\nimport AddTask from \"./AddTask\"; // Import data for board\n\nimport { initialBoardData } from \"../data/board-initial-data\"; // Import BoardColumn component\n\nimport { BoardColumn } from \"./board-column\"; // Create styles board element properties\n\nconst BoardEl = styled.div`\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between;\n`;\nexport class Board extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: initialBoardData,\n      itemContent: \"\"\n    };\n\n    this.editContent = event => {\n      if (event.key === \"Enter\") {\n        // get edited item\n        let target = event.target;\n        let itemId = target.id;\n        let itemContent = target.value; // updated content of item\n\n        const newState = { ...this.state.data,\n          items: { ...this.state.data.items,\n            [itemId]: {\n              id: itemId,\n              content: itemContent\n            }\n          }\n        };\n        this.setState({\n          data: newState\n        }); // press enter, lose focus\n\n        event.target.blur();\n      }\n    };\n\n    this.addNewTask = () => {\n      let newTask = document.getElementById(\"add-content\");\n      if (newTask === null) return;\n      let itemContent = newTask.value;\n      console.log(itemContent);\n      if (newTask.value === \"\") return; // auto generate item_id\n\n      let itemIndex = Object.keys(this.state.data.items).length + 1;\n      let itemId = \"item-\" + itemIndex; // put the new added item into column-4 by default\n\n      const columnAdd = this.state.data.columns[\"column-4\"];\n      const newItemsIds = Array.from(columnAdd.itemsIds);\n      newItemsIds.push(itemId);\n      const newColumnAdd = { ...columnAdd,\n        itemsIds: newItemsIds\n      }; // update items\n\n      const newState = { ...this.state.data,\n        items: { ...this.state.data.items,\n          [itemId]: {\n            id: itemId,\n            content: itemContent\n          }\n        },\n        columns: { ...this.state.data.columns,\n          \"column-4\": newColumnAdd\n        }\n      };\n      this.setState({\n        data: newState\n      });\n      console.log(this.state.data);\n    };\n\n    this.onDragEnd = result => {\n      const {\n        source,\n        destination,\n        draggableId\n      } = result; // Do nothing if item is dropped outside the list\n\n      if (!destination) {\n        return;\n      } // Do nothing if the item is dropped into the same place\n\n\n      if (destination.droppableId === source.droppableId && destination.index === source.index) {\n        return;\n      } // Find column from which the item was dragged from\n\n\n      const columnStart = this.state.data.columns[source.droppableId]; // Find column in which the item was dropped\n\n      const columnFinish = this.state.data.columns[destination.droppableId]; // Moving items in the same list\n\n      if (columnStart === columnFinish) {\n        // Get all item ids in currently active list\n        const newItemsIds = Array.from(columnStart.itemsIds); // Remove the id of dragged item from its original position\n\n        newItemsIds.splice(source.index, 1); // Insert the id of dragged item to the new position\n\n        newItemsIds.splice(destination.index, 0, draggableId); // Create new, updated, object with data for columns\n\n        const newColumnStart = { ...columnStart,\n          itemsIds: newItemsIds\n        }; // Create new board state with updated data for columns\n\n        const newState = { ...this.state.data,\n          columns: { ...this.state.data.columns,\n            [newColumnStart.id]: newColumnStart\n          }\n        }; // Update the board state with new data\n\n        this.setState({\n          data: newState\n        });\n      } else {\n        // Moving items from one list to another\n        // Get all item ids in source list\n        const newStartItemsIds = Array.from(columnStart.itemsIds); // Remove the id of dragged item from its original position\n\n        newStartItemsIds.splice(source.index, 1); // Create new, updated, object with data for source column\n\n        const newColumnStart = { ...columnStart,\n          itemsIds: newStartItemsIds\n        }; // Get all item ids in destination list\n\n        const newFinishItemsIds = Array.from(columnFinish.itemsIds); // Insert the id of dragged item to the new position in destination list\n\n        newFinishItemsIds.splice(destination.index, 0, draggableId); // Create new, updated, object with data for destination column\n\n        const newColumnFinish = { ...columnFinish,\n          itemsIds: newFinishItemsIds\n        }; // Create new board state with updated data for both, source and destination columns\n\n        const newState = { ...this.state.data,\n          columns: { ...this.state.data.columns,\n            [newColumnStart.id]: newColumnStart,\n            [newColumnFinish.id]: newColumnFinish\n          }\n        }; // Update the board state with new data\n\n        this.setState({\n          data: newState\n        });\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(BoardEl, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(DragDropContext, {\n      onDragEnd: this.onDragEnd,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }\n    }, this.state.data.columnsOrder.map(columnId => {\n      // Get id of the current column\n      const column = this.state.data.columns[columnId]; // Get item belonging to the current column\n\n      const items = column.itemsIds.map(itemId => this.state.data.items[itemId]); // Render the BoardColumn component\n\n      return /*#__PURE__*/React.createElement(BoardColumn, {\n        key: column.id,\n        column: column,\n        items: items,\n        onkey: this.editContent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 17\n        }\n      });\n    }))), /*#__PURE__*/React.createElement(AddTask, {\n      submitOnClick: this.addNewTask,\n      onkeyup: event => {\n        if (event.key === \"Enter\") this.addNewTask();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/25359/sp/react-dnd-task/src/components/board.tsx"],"names":["React","DragDropContext","styled","AddTask","initialBoardData","BoardColumn","BoardEl","div","Board","Component","state","data","itemContent","editContent","event","key","target","itemId","id","value","newState","items","content","setState","blur","addNewTask","newTask","document","getElementById","console","log","itemIndex","Object","keys","length","columnAdd","columns","newItemsIds","Array","from","itemsIds","push","newColumnAdd","onDragEnd","result","source","destination","draggableId","droppableId","index","columnStart","columnFinish","splice","newColumnStart","newStartItemsIds","newFinishItemsIds","newColumnFinish","render","columnsOrder","map","columnId","column"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport styled from \"styled-components\";\r\nimport AddTask from \"./AddTask\";\r\n\r\n// Import data for board\r\nimport { initialBoardData } from \"../data/board-initial-data\";\r\n\r\n// Import BoardColumn component\r\nimport { BoardColumn } from \"./board-column\";\r\n\r\n// Create styles board element properties\r\nconst BoardEl = styled.div`\r\n  display: flex;\r\n  align-items: flex-start;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport class Board extends React.Component {\r\n  // Initialize board state with board data\r\n  state = { data: initialBoardData, itemContent: \"\" };\r\n\r\n  editContent = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (event.key === \"Enter\") {\r\n      // get edited item\r\n      let target = event.target as HTMLInputElement;\r\n      let itemId = target.id;\r\n      let itemContent = target.value;\r\n      // updated content of item\r\n      const newState = {\r\n        ...this.state.data,\r\n        items: {\r\n          ...this.state.data.items,\r\n          [itemId]: { id: itemId, content: itemContent },\r\n        },\r\n      };\r\n      this.setState({ data: newState });\r\n      // press enter, lose focus\r\n      (event.target as HTMLInputElement).blur();\r\n    }\r\n  };\r\n\r\n  addNewTask = () => {\r\n    let newTask = document.getElementById(\"add-content\");\r\n    if (newTask === null) return;\r\n    let itemContent = (newTask as HTMLInputElement).value;\r\n    console.log(itemContent);\r\n    if ((newTask as HTMLInputElement).value === \"\") return;\r\n\r\n    // auto generate item_id\r\n    let itemIndex = Object.keys(this.state.data.items).length + 1;\r\n    let itemId: string = \"item-\" + itemIndex;\r\n\r\n    // put the new added item into column-4 by default\r\n    const columnAdd = (this.state.data.columns as any)[\"column-4\"];\r\n    const newItemsIds = Array.from(columnAdd.itemsIds);\r\n    newItemsIds.push(itemId);\r\n    const newColumnAdd = {\r\n      ...columnAdd,\r\n      itemsIds: newItemsIds,\r\n    };\r\n\r\n    // update items\r\n    const newState = {\r\n      ...this.state.data,\r\n      items: {\r\n        ...this.state.data.items,\r\n        [itemId]: { id: itemId, content: itemContent },\r\n      },\r\n      columns: {\r\n        ...this.state.data.columns,\r\n        \"column-4\": newColumnAdd,\r\n      },\r\n    };\r\n    this.setState({ data: newState });\r\n    console.log(this.state.data);\r\n  };\r\n\r\n  // Handle drag & drop\r\n  onDragEnd = (result: any) => {\r\n    const { source, destination, draggableId } = result;\r\n\r\n    // Do nothing if item is dropped outside the list\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    // Do nothing if the item is dropped into the same place\r\n    if (\r\n      destination.droppableId === source.droppableId &&\r\n      destination.index === source.index\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    // Find column from which the item was dragged from\r\n    const columnStart = (this.state.data.columns as any)[source.droppableId];\r\n\r\n    // Find column in which the item was dropped\r\n    const columnFinish = (this.state.data.columns as any)[\r\n      destination.droppableId\r\n    ];\r\n\r\n    // Moving items in the same list\r\n    if (columnStart === columnFinish) {\r\n      // Get all item ids in currently active list\r\n      const newItemsIds = Array.from(columnStart.itemsIds);\r\n\r\n      // Remove the id of dragged item from its original position\r\n      newItemsIds.splice(source.index, 1);\r\n\r\n      // Insert the id of dragged item to the new position\r\n      newItemsIds.splice(destination.index, 0, draggableId);\r\n\r\n      // Create new, updated, object with data for columns\r\n      const newColumnStart = {\r\n        ...columnStart,\r\n        itemsIds: newItemsIds,\r\n      };\r\n\r\n      // Create new board state with updated data for columns\r\n      const newState = {\r\n        ...this.state.data,\r\n        columns: {\r\n          ...this.state.data.columns,\r\n          [newColumnStart.id]: newColumnStart,\r\n        },\r\n      };\r\n\r\n      // Update the board state with new data\r\n      this.setState({ data: newState });\r\n    } else {\r\n      // Moving items from one list to another\r\n      // Get all item ids in source list\r\n      const newStartItemsIds = Array.from(columnStart.itemsIds);\r\n\r\n      // Remove the id of dragged item from its original position\r\n      newStartItemsIds.splice(source.index, 1);\r\n\r\n      // Create new, updated, object with data for source column\r\n      const newColumnStart = {\r\n        ...columnStart,\r\n        itemsIds: newStartItemsIds,\r\n      };\r\n\r\n      // Get all item ids in destination list\r\n      const newFinishItemsIds = Array.from(columnFinish.itemsIds);\r\n\r\n      // Insert the id of dragged item to the new position in destination list\r\n      newFinishItemsIds.splice(destination.index, 0, draggableId);\r\n\r\n      // Create new, updated, object with data for destination column\r\n      const newColumnFinish = {\r\n        ...columnFinish,\r\n        itemsIds: newFinishItemsIds,\r\n      };\r\n\r\n      // Create new board state with updated data for both, source and destination columns\r\n      const newState = {\r\n        ...this.state.data,\r\n        columns: {\r\n          ...this.state.data.columns,\r\n          [newColumnStart.id]: newColumnStart,\r\n          [newColumnFinish.id]: newColumnFinish,\r\n        },\r\n      };\r\n\r\n      // Update the board state with new data\r\n      this.setState({ data: newState });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <BoardEl>\r\n          <DragDropContext onDragEnd={this.onDragEnd}>\r\n            {this.state.data.columnsOrder.map((columnId) => {\r\n              // Get id of the current column\r\n              const column = (this.state.data.columns as any)[columnId];\r\n\r\n              // Get item belonging to the current column\r\n              const items = column.itemsIds.map(\r\n                (itemId: string) => (this.state.data.items as any)[itemId]\r\n              );\r\n\r\n              // Render the BoardColumn component\r\n              return (\r\n                <BoardColumn\r\n                  key={column.id}\r\n                  column={column}\r\n                  items={items}\r\n                  onkey={this.editContent}\r\n                />\r\n              );\r\n            })}\r\n          </DragDropContext>\r\n        </BoardEl>\r\n        <AddTask\r\n          submitOnClick={this.addNewTask}\r\n          onkeyup={(event) => {\r\n            if (event.key === \"Enter\") this.addNewTask();\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}