{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\25359\\\\sp\\\\react-dnd-task\\\\src\\\\components\\\\board.tsx\";\nimport * as React from \"react\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nimport styled from \"styled-components\"; // Import data for board\n\nimport { initialBoardData } from \"../data/board-initial-data\"; // Import BoardColumn component\n\nimport { BoardColumn } from \"./board-column\";\nconst bgColor = [\"#FB7D44\", \"#2A92BF\", \"#F4CE46\", \"#00B961\"]; // Create styles board element properties\n\nconst BoardEl = styled.div`\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between;\n`;\nexport class Board extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: initialBoardData,\n      ColumnDroppable: false,\n      itemDroppable: false\n    };\n\n    this.editContent = event => {\n      if (event.key === \"Enter\") {\n        // get edited item\n        let target = event.target;\n        let itemId = target.id;\n        let itemContent = target.value; // updated content of item\n\n        const newState = { ...this.state.data,\n          items: { ...this.state.data.items,\n            [itemId]: {\n              id: itemId,\n              content: itemContent\n            }\n          }\n        };\n        this.setState({\n          data: newState\n        }); // press enter, lose focus\n\n        event.target.blur();\n      }\n    };\n\n    this.addNewTask = event => {\n      if (event.key === \"Enter\") {\n        // Do nothing if no typing in textField\n        let itemContent = event.target.value;\n        if (itemContent === \"\") return; // auto generate item_id\n\n        let itemIndex = Object.keys(this.state.data.items).length + 1;\n        let itemId = \"item-\" + itemIndex;\n        console.log(document.getElementById(\"add-content\"));\n        let node = document.getElementById(\"add-content\");\n\n        if (node !== null && node.innerHTML !== undefined) {\n          columnId = node.innerHTML;\n          const columnAdd = this.state.data.columns[columnId];\n          const newItemsIds = Array.from(columnAdd.itemsIds);\n          console.log(newItemsIds);\n          newItemsIds.push(itemId);\n          const newColumnAdd = { ...columnAdd,\n            itemsIds: newItemsIds\n          };\n          console.log(newColumnAdd);\n          console.log(itemContent); // update items\n\n          const newState = { ...this.state.data,\n            items: { ...this.state.data.items,\n              [itemId]: {\n                id: itemId,\n                content: itemContent\n              }\n            },\n            columns: { ...this.state.data.columns,\n              [columnId]: newColumnAdd\n            }\n          };\n          this.setState({\n            data: newState\n          });\n        }\n\n        console.log(this.state.data);\n      } // put the new added item into column-4 by default\n\n    };\n\n    this.onDragStart = result => {\n      const {\n        draggableId\n      } = result;\n      console.log(draggableId);\n\n      if (draggableId.includes(\"item\")) {\n        this.setState({\n          ColumnDroppable: true\n        });\n        this.setState({\n          itemDroppable: false\n        });\n      }\n\n      if (draggableId.includes(\"column\")) {\n        this.setState({\n          itemDroppable: true\n        });\n        this.setState({\n          ColumnDroppable: false\n        });\n      }\n    };\n\n    this.onDragEnd = result => {\n      const {\n        source,\n        destination,\n        draggableId\n      } = result; // Do nothing if item is dropped outside the list\n\n      if (!destination) return;\n      if (source.droppableId === \"lalala\" && destination.droppableId !== \"lalala\") return;\n      if (source.droppableId !== \"lalala\" && destination.droppableId === \"lalala\") return;\n\n      if (draggableId.includes(\"column\")) {\n        const newcolumnsOrder = this.state.data.columnsOrder;\n        let temp = newcolumnsOrder[source.index];\n        newcolumnsOrder[source.index] = newcolumnsOrder[destination.index];\n        newcolumnsOrder[destination.index] = temp;\n        let tmp = bgColor[source.index];\n        bgColor[source.index] = bgColor[destination.index];\n        bgColor[destination.index] = tmp;\n        const newState = { ...this.state.data,\n          columnsOrder: newcolumnsOrder\n        };\n        this.setState({\n          data: newState\n        });\n      }\n\n      if (draggableId.includes(\"item\")) {\n        // Do nothing if the item is dropped into the same place\n        if (destination.droppableId === source.droppableId && destination.index === source.index) {\n          return;\n        } // Find column from which the item was dragged from\n\n\n        const columnStart = this.state.data.columns[source.droppableId]; // Find column in which the item was dropped\n\n        const columnFinish = this.state.data.columns[destination.droppableId]; // Moving items in the same list\n\n        if (columnStart === columnFinish) {\n          // Get all item ids in currently active list\n          const newItemsIds = Array.from(columnStart.itemsIds); // Remove the id of dragged item from its original position\n\n          newItemsIds.splice(source.index, 1); // Insert the id of dragged item to the new position\n\n          newItemsIds.splice(destination.index, 0, draggableId); // Create new, updated, object with data for columns\n\n          const newColumnStart = { ...columnStart,\n            itemsIds: newItemsIds\n          }; // Create new board state with updated data for columns\n\n          const newState = { ...this.state.data,\n            columns: { ...this.state.data.columns,\n              [newColumnStart.id]: newColumnStart\n            }\n          }; // Update the board state with new data\n\n          this.setState({\n            data: newState\n          });\n        } else {\n          // Moving items from one list to another\n          // Get all item ids in source list\n          const newStartItemsIds = Array.from(columnStart.itemsIds); // Remove the id of dragged item from its original position\n\n          newStartItemsIds.splice(source.index, 1); // Create new, updated, object with data for source column\n\n          const newColumnStart = { ...columnStart,\n            itemsIds: newStartItemsIds\n          }; // Get all item ids in destination list\n\n          const newFinishItemsIds = Array.from(columnFinish.itemsIds); // Insert the id of dragged item to the new position in destination list\n\n          newFinishItemsIds.splice(destination.index, 0, draggableId); // Create new, updated, object with data for destination column\n\n          const newColumnFinish = { ...columnFinish,\n            itemsIds: newFinishItemsIds\n          }; // Create new board state with updated data for both, source and destination columns\n\n          const newState = { ...this.state.data,\n            columns: { ...this.state.data.columns,\n              [newColumnStart.id]: newColumnStart,\n              [newColumnFinish.id]: newColumnFinish\n            }\n          }; // Update the board state with new data\n\n          this.setState({\n            data: newState\n          });\n        }\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        textAlign: \"center\",\n        color: \"#fff\",\n        marginTop: \"5%\",\n        marginBottom: \"5%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 11\n      }\n    }, \" Welcome to Vicky's Coding Test \"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 11\n      }\n    }, \" Completed at 19/09/2021 \")), /*#__PURE__*/React.createElement(DragDropContext, {\n      onDragEnd: this.onDragEnd,\n      onDragStart: this.onDragStart,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Droppable, {\n      droppableId: \"lalala\",\n      direction: \"horizontal\",\n      isDropDisabled: this.state.ColumnDroppable,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 11\n      }\n    }, provided => /*#__PURE__*/React.createElement(BoardEl, Object.assign({}, provided.droppableProps, {\n      ref: provided.innerRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 15\n      }\n    }), this.state.data.columnsOrder.map((columnId, index) => {\n      // Get id of the current column\n      const column = this.state.data.columns[columnId]; // Get item belonging to the current column\n\n      const items = column.itemsIds.map(itemId => this.state.data.items[itemId]); // Render the BoardColumn component\n\n      return /*#__PURE__*/React.createElement(BoardColumn, {\n        bgColor: bgColor[index],\n        index: index,\n        key: column.id,\n        column: column,\n        items: items,\n        onkey: this.editContent,\n        AddonKey: this.addNewTask,\n        droppable: this.state.itemDroppable,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 21\n        }\n      });\n    }), provided.placeholder))));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/25359/sp/react-dnd-task/src/components/board.tsx"],"names":["React","DragDropContext","Droppable","styled","initialBoardData","BoardColumn","bgColor","BoardEl","div","Board","Component","state","data","ColumnDroppable","itemDroppable","editContent","event","key","target","itemId","id","itemContent","value","newState","items","content","setState","blur","addNewTask","itemIndex","Object","keys","length","console","log","document","getElementById","node","innerHTML","undefined","columnId","columnAdd","columns","newItemsIds","Array","from","itemsIds","push","newColumnAdd","onDragStart","result","draggableId","includes","onDragEnd","source","destination","droppableId","newcolumnsOrder","columnsOrder","temp","index","tmp","columnStart","columnFinish","splice","newColumnStart","newStartItemsIds","newFinishItemsIds","newColumnFinish","render","textAlign","color","marginTop","marginBottom","provided","droppableProps","innerRef","map","column","placeholder"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\r\nimport styled from \"styled-components\";\r\n\r\n// Import data for board\r\nimport { initialBoardData } from \"../data/board-initial-data\";\r\n\r\n// Import BoardColumn component\r\nimport { BoardColumn } from \"./board-column\";\r\n\r\nconst bgColor = [\"#FB7D44\", \"#2A92BF\", \"#F4CE46\", \"#00B961\"];\r\n\r\n// Create styles board element properties\r\nconst BoardEl = styled.div`\r\n  display: flex;\r\n  align-items: flex-start;\r\n  justify-content: space-between;\r\n`;\r\nexport class Board extends React.Component {\r\n  // Initialize board state with board data\r\n  state = {\r\n    data: initialBoardData,\r\n    ColumnDroppable: false,\r\n    itemDroppable: false,\r\n  };\r\n\r\n  // Handle edit content of items\r\n  editContent = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (event.key === \"Enter\") {\r\n      // get edited item\r\n      let target = event.target as HTMLInputElement;\r\n      let itemId = target.id;\r\n      let itemContent = target.value;\r\n      // updated content of item\r\n      const newState = {\r\n        ...this.state.data,\r\n        items: {\r\n          ...this.state.data.items,\r\n          [itemId]: { id: itemId, content: itemContent },\r\n        },\r\n      };\r\n      this.setState({ data: newState });\r\n      // press enter, lose focus\r\n      (event.target as HTMLInputElement).blur();\r\n    }\r\n  };\r\n\r\n  // Handle adding new Tasks\r\n  addNewTask = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (event.key === \"Enter\") {\r\n      // Do nothing if no typing in textField\r\n      let itemContent = (event.target as HTMLInputElement).value;\r\n      if (itemContent === \"\") return;\r\n      // auto generate item_id\r\n      let itemIndex = Object.keys(this.state.data.items).length + 1;\r\n      let itemId: string = \"item-\" + itemIndex;\r\n      \r\n      console.log(document.getElementById(\"add-content\"));\r\n      let node = document.getElementById(\"add-content\");\r\n      if (node !== null && node.innerHTML !== undefined){\r\n        columnId =  node.innerHTML;\r\n        const columnAdd = (this.state.data.columns as any)[columnId];\r\n      \r\n      const newItemsIds = Array.from(columnAdd.itemsIds);\r\n      console.log(newItemsIds);\r\n      newItemsIds.push(itemId);\r\n      \r\n      const newColumnAdd = {\r\n        ...columnAdd,\r\n        itemsIds: newItemsIds,\r\n      };\r\n      console.log(newColumnAdd);\r\n      console.log(itemContent);\r\n\r\n\r\n      // update items\r\n      const newState = {\r\n        ...this.state.data,\r\n        items: {\r\n          ...this.state.data.items,\r\n          [itemId]: { id: itemId, content: itemContent },\r\n        },\r\n        columns: {\r\n          ...this.state.data.columns,\r\n          [columnId]: newColumnAdd,\r\n        },\r\n      };\r\n      this.setState({ data: newState });\r\n    }\r\n    console.log(this.state.data);\r\n      }\r\n\r\n      // put the new added item into column-4 by default\r\n      \r\n  };\r\n\r\n  onDragStart = (result: any) => {\r\n    const { draggableId } = result;\r\n    console.log(draggableId);\r\n    if (draggableId.includes(\"item\")) {\r\n      this.setState({ ColumnDroppable: true });\r\n      this.setState({ itemDroppable: false });\r\n    }\r\n    if (draggableId.includes(\"column\")) {\r\n      this.setState({ itemDroppable: true });\r\n      this.setState({ ColumnDroppable: false });\r\n    }\r\n  };\r\n  // Handle drag & drop\r\n  onDragEnd = (result: any) => {\r\n    const { source, destination, draggableId } = result;\r\n    // Do nothing if item is dropped outside the list\r\n    if (!destination) return;\r\n    if (source.droppableId === \"lalala\" && destination.droppableId !== \"lalala\")\r\n      return;\r\n    if (source.droppableId !== \"lalala\" && destination.droppableId === \"lalala\")\r\n      return;\r\n    if (draggableId.includes(\"column\")) {\r\n      const newcolumnsOrder = this.state.data.columnsOrder;\r\n      let temp = newcolumnsOrder[source.index];\r\n      newcolumnsOrder[source.index] = newcolumnsOrder[destination.index];\r\n      newcolumnsOrder[destination.index] = temp;\r\n      let tmp = bgColor[source.index];\r\n      bgColor[source.index] = bgColor[destination.index];\r\n      bgColor[destination.index] = tmp;\r\n      const newState = {\r\n        ...this.state.data,\r\n        columnsOrder: newcolumnsOrder,\r\n      };\r\n      this.setState({ data: newState });\r\n    }\r\n    if (draggableId.includes(\"item\")) {\r\n      // Do nothing if the item is dropped into the same place\r\n      if (\r\n        destination.droppableId === source.droppableId &&\r\n        destination.index === source.index\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      // Find column from which the item was dragged from\r\n      const columnStart = (this.state.data.columns as any)[source.droppableId];\r\n\r\n      // Find column in which the item was dropped\r\n      const columnFinish = (this.state.data.columns as any)[\r\n        destination.droppableId\r\n      ];\r\n\r\n      // Moving items in the same list\r\n      if (columnStart === columnFinish) {\r\n        // Get all item ids in currently active list\r\n        const newItemsIds = Array.from(columnStart.itemsIds);\r\n\r\n        // Remove the id of dragged item from its original position\r\n        newItemsIds.splice(source.index, 1);\r\n\r\n        // Insert the id of dragged item to the new position\r\n        newItemsIds.splice(destination.index, 0, draggableId);\r\n\r\n        // Create new, updated, object with data for columns\r\n        const newColumnStart = {\r\n          ...columnStart,\r\n          itemsIds: newItemsIds,\r\n        };\r\n\r\n        // Create new board state with updated data for columns\r\n        const newState = {\r\n          ...this.state.data,\r\n          columns: {\r\n            ...this.state.data.columns,\r\n            [newColumnStart.id]: newColumnStart,\r\n          },\r\n        };\r\n\r\n        // Update the board state with new data\r\n        this.setState({ data: newState });\r\n      } else {\r\n        // Moving items from one list to another\r\n        // Get all item ids in source list\r\n        const newStartItemsIds = Array.from(columnStart.itemsIds);\r\n\r\n        // Remove the id of dragged item from its original position\r\n        newStartItemsIds.splice(source.index, 1);\r\n\r\n        // Create new, updated, object with data for source column\r\n        const newColumnStart = {\r\n          ...columnStart,\r\n          itemsIds: newStartItemsIds,\r\n        };\r\n\r\n        // Get all item ids in destination list\r\n        const newFinishItemsIds = Array.from(columnFinish.itemsIds);\r\n\r\n        // Insert the id of dragged item to the new position in destination list\r\n        newFinishItemsIds.splice(destination.index, 0, draggableId);\r\n\r\n        // Create new, updated, object with data for destination column\r\n        const newColumnFinish = {\r\n          ...columnFinish,\r\n          itemsIds: newFinishItemsIds,\r\n        };\r\n\r\n        // Create new board state with updated data for both, source and destination columns\r\n        const newState = {\r\n          ...this.state.data,\r\n          columns: {\r\n            ...this.state.data.columns,\r\n            [newColumnStart.id]: newColumnStart,\r\n            [newColumnFinish.id]: newColumnFinish,\r\n          },\r\n        };\r\n\r\n        // Update the board state with new data\r\n        this.setState({ data: newState });\r\n      }\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div\r\n          style={{\r\n            textAlign: \"center\",\r\n            color: \"#fff\",\r\n            marginTop: \"5%\",\r\n            marginBottom: \"5%\",\r\n          }}\r\n        >\r\n          <h1> Welcome to Vicky's Coding Test </h1>\r\n          <h3> Completed at 19/09/2021 </h3>\r\n        </div>\r\n        <DragDropContext\r\n          onDragEnd={this.onDragEnd}\r\n          onDragStart={this.onDragStart}\r\n        >\r\n          <Droppable\r\n            droppableId=\"lalala\"\r\n            direction=\"horizontal\"\r\n            isDropDisabled={this.state.ColumnDroppable}\r\n          >\r\n            {(provided) => (\r\n              <BoardEl {...provided.droppableProps} ref={provided.innerRef}>\r\n                {this.state.data.columnsOrder.map((columnId, index) => {\r\n                  // Get id of the current column\r\n                  const column = (this.state.data.columns as any)[columnId];\r\n\r\n                  // Get item belonging to the current column\r\n                  const items = column.itemsIds.map(\r\n                    (itemId: string) => (this.state.data.items as any)[itemId]\r\n                  );\r\n\r\n                  // Render the BoardColumn component\r\n                  return (\r\n                    <BoardColumn\r\n                      bgColor={bgColor[index]}\r\n                      index={index}\r\n                      key={column.id}\r\n                      column={column}\r\n                      items={items}\r\n                      onkey={this.editContent}\r\n                      AddonKey={this.addNewTask}\r\n                      droppable={this.state.itemDroppable}\r\n                    />\r\n                  );\r\n                })}\r\n                {provided.placeholder}\r\n              </BoardEl>\r\n            )}\r\n          </Droppable>\r\n        </DragDropContext>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}