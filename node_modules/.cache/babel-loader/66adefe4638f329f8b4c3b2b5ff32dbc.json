{"ast":null,"code":"var _jsxFileName = \"/Users/nilsvanderwerf/Development/code/coding-exercises/react-dnd-task/src/components/board.tsx\";\nimport * as React from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport styled from 'styled-components'; // Import data for board\n\nimport { initialBoardData } from '../data/board-initial-data'; // Import BoardColumn component\n\nimport { BoardColumn } from './board-column'; // Create styles board element properties\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BoardEl = styled.div`\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between;\n`;\n_c = BoardEl;\nexport class Board extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = initialBoardData;\n\n    this.onDragEnd = result => {\n      const {\n        source,\n        destination,\n        draggableId\n      } = result; // Do nothing if item is dropped outside the list\n\n      if (!destination) {\n        return;\n      } // Do nothing if the item is dropped into the same place\n\n\n      if (destination.droppableId === source.droppableId && destination.index === source.index) {\n        return;\n      } // Find column from which the item was dragged from\n\n\n      const columnStart = this.state.columns[source.droppableId]; // Find column in which the item was dropped\n\n      const columnFinish = this.state.columns[destination.droppableId]; // Moving items in the same list\n\n      if (columnStart === columnFinish) {\n        // Get all item ids in currently active list\n        const newItemsIds = Array.from(columnStart.itemsIds); // Remove the id of dragged item from its original position\n\n        newItemsIds.splice(source.index, 1); // Insert the id of dragged item to the new position\n\n        newItemsIds.splice(destination.index, 0, draggableId); // Create new, updated, object with data for columns\n\n        const newColumnStart = { ...columnStart,\n          itemsIds: newItemsIds\n        }; // Create new board state with updated data for columns\n\n        const newState = { ...this.state,\n          columns: { ...this.state.columns,\n            [newColumnStart.id]: newColumnStart\n          }\n        }; // Update the board state with new data\n\n        this.setState(newState);\n      } else {\n        // Moving items from one list to another\n        // Get all item ids in source list\n        const newStartItemsIds = Array.from(columnStart.itemsIds); // Remove the id of dragged item from its original position\n\n        newStartItemsIds.splice(source.index, 1); // Create new, updated, object with data for source column\n\n        const newColumnStart = { ...columnStart,\n          itemsIds: newStartItemsIds\n        }; // Get all item ids in destination list\n\n        const newFinishItemsIds = Array.from(columnFinish.itemsIds); // Insert the id of dragged item to the new position in destination list\n\n        newFinishItemsIds.splice(destination.index, 0, draggableId); // Create new, updated, object with data for destination column\n\n        const newColumnFinish = { ...columnFinish,\n          itemsIds: newFinishItemsIds\n        }; // Create new board state with updated data for both, source and destination columns\n\n        const newState = { ...this.state,\n          columns: { ...this.state.columns,\n            [newColumnStart.id]: newColumnStart,\n            [newColumnFinish.id]: newColumnFinish\n          }\n        }; // Update the board state with new data\n\n        this.setState(newState);\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(BoardEl, {\n      children: /*#__PURE__*/_jsxDEV(DragDropContext, {\n        onDragEnd: this.onDragEnd,\n        children: this.state.columnsOrder.map(columnId => {\n          // Get id of the current column\n          const column = this.state.columns[columnId]; // Get item belonging to the current column\n\n          const items = column.itemsIds.map(itemId => this.state.items[itemId]); // Render the BoardColumn component\n\n          return /*#__PURE__*/_jsxDEV(BoardColumn, {\n            column: column,\n            items: items\n          }, column.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 20\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"BoardEl\");","map":{"version":3,"sources":["/Users/nilsvanderwerf/Development/code/coding-exercises/react-dnd-task/src/components/board.tsx"],"names":["React","DragDropContext","styled","initialBoardData","BoardColumn","BoardEl","div","Board","Component","state","onDragEnd","result","source","destination","draggableId","droppableId","index","columnStart","columns","columnFinish","newItemsIds","Array","from","itemsIds","splice","newColumnStart","newState","id","setState","newStartItemsIds","newFinishItemsIds","newColumnFinish","render","columnsOrder","map","columnId","column","items","itemId"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { DragDropContext } from 'react-beautiful-dnd'\nimport styled from 'styled-components'\n\n// Import data for board\nimport { initialBoardData } from '../data/board-initial-data'\n\n// Import BoardColumn component\nimport { BoardColumn } from './board-column'\n\n// Create styles board element properties\nconst BoardEl = styled.div`\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between;\n`\n\nexport class Board extends React.Component {\n  // Initialize board state with board data\n  state = initialBoardData\n\n  // Handle drag & drop\n  onDragEnd = (result: any) => {\n    const { source, destination, draggableId } = result\n\n    // Do nothing if item is dropped outside the list\n    if (!destination) {\n      return\n    }\n\n    // Do nothing if the item is dropped into the same place\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return\n    }\n\n    // Find column from which the item was dragged from\n    const columnStart = (this.state.columns as any)[source.droppableId]\n\n    // Find column in which the item was dropped\n    const columnFinish = (this.state.columns as any)[destination.droppableId]\n\n    // Moving items in the same list\n    if (columnStart === columnFinish) {\n      // Get all item ids in currently active list\n      const newItemsIds = Array.from(columnStart.itemsIds)\n\n      // Remove the id of dragged item from its original position\n      newItemsIds.splice(source.index, 1)\n\n      // Insert the id of dragged item to the new position\n      newItemsIds.splice(destination.index, 0, draggableId)\n\n      // Create new, updated, object with data for columns\n      const newColumnStart = {\n        ...columnStart,\n        itemsIds: newItemsIds\n      }\n\n      // Create new board state with updated data for columns\n      const newState = {\n        ...this.state,\n        columns: {\n          ...this.state.columns,\n          [newColumnStart.id]: newColumnStart\n        }\n      }\n\n      // Update the board state with new data\n      this.setState(newState)\n    } else {\n      // Moving items from one list to another\n      // Get all item ids in source list\n      const newStartItemsIds = Array.from(columnStart.itemsIds)\n\n      // Remove the id of dragged item from its original position\n      newStartItemsIds.splice(source.index, 1)\n\n      // Create new, updated, object with data for source column\n      const newColumnStart = {\n        ...columnStart,\n        itemsIds: newStartItemsIds\n      }\n\n      // Get all item ids in destination list\n      const newFinishItemsIds = Array.from(columnFinish.itemsIds)\n\n      // Insert the id of dragged item to the new position in destination list\n      newFinishItemsIds.splice(destination.index, 0, draggableId)\n\n      // Create new, updated, object with data for destination column\n      const newColumnFinish = {\n        ...columnFinish,\n        itemsIds: newFinishItemsIds\n      }\n\n      // Create new board state with updated data for both, source and destination columns\n      const newState = {\n        ...this.state,\n        columns: {\n          ...this.state.columns,\n          [newColumnStart.id]: newColumnStart,\n          [newColumnFinish.id]: newColumnFinish\n        }\n      }\n\n      // Update the board state with new data\n      this.setState(newState)\n    }\n  }\n\n  render() {\n    return(\n      <BoardEl>\n        <DragDropContext onDragEnd={this.onDragEnd}>\n          {this.state.columnsOrder.map(columnId => {\n            // Get id of the current column\n            const column = (this.state.columns as any)[columnId]\n\n            // Get item belonging to the current column\n            const items = column.itemsIds.map((itemId: string) => (this.state.items as any)[itemId])\n\n            // Render the BoardColumn component\n            return <BoardColumn key={column.id} column={column} items={items} />\n          })}\n        </DragDropContext>\n      </BoardEl>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}